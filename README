This repository is a WIP of exploits for the (now legacy) Protostar challenge.
See https://exploit.education/ for more information.

This file documents bits of my though process and notes used for solving the
exercises. Since this is a first-time learning experience on the topic for me,
the solutions may be far from optimal. The exploits rely on pwntools for
generating the payloads, but most of the research process is done with with a
barebone old gdb since the image is pretty old. I also used Ghidra locally to
analyse the binaries.


Environment
===========

The vm can be downloaded (if needed) and started with `make runvm`. It depends
on qemu, and re-binds all the necessary ports on localhost:<port>+10000 (e.g:
SSH/22 with `ssh -p10022 user@localhost`)

If the vm is started, all the exploits can be executed on that vm using `make`
or `make all`. A few notes:
- running them in parallel (`make -jX`) is supported
- having `PWNLIB_DEBUG=1` in the environment is also very helpful since the
  exploits don't print much information.
- a specific exploit can be run by expliciting its name (e.g: `make stack3`)
- a specific category of exploit can be run by expliciting its name (e.g: `make
  stack`)
- all the exploits depends on a Python2 virtual env in which pwntools is
  installed (this is automatic)
- all the exploits assert at the end to make sure they did get executed
  properly.
- FIXME: `net1` sometimes fails for some unknown reason. This may be a bug in
  the exploit, in the remote service or in pwntools. Investigation needed.

Feel free to reuse that Makefile as a building block for solving all the
exercises yourself.


Exploits: net
=============

First time using pwntools, nothing fancy. Packing and unpacking routines.


Exploits: stack
===============


stack5
------

Coredumps are not enabled by default, but we can rely on dmesg to get
information of the ip and sp after triggering a crash.

NOTE0: we do grep the process to make it possible to run exploits in parallel
NOTE1: values can be different depending on the env (shell, gdb, ...).
NOTE2: it might be possible to use pwntools to leak that (see DynELF).

We then reconstruct eax (pointer to the user buffer before call to gets()) just
like main() does. Leaked sp is the value after main's ret. -4 because ret poped
ip from the stack, and -4 again to account for the push ebp at the start of
main. The rest corresponds to what's found in main() to build gets's argument
as eax.

  .-- eax (buf, shellcode, 61616161)                our ip target (61616174)
  v                                                            v
  | 0x50 - 0x10 | align (& ~0xF) | ebp pushed by main | __lib_start_main+X |
                                           4                     4
                                                                           ^
                                                            sp at crash ---'

-> buf = ((sp - 8) & ~0xf) - 0x40


stack6+7
--------

Same exploit (symlinked)... we should probably try another approach for stack6?


Exploits: format
================


format0
-------

Mmmh I think I cheated on this one since I exploited the overflow instead.


format1
-------

This one was the hardest challenge so far. Spent 3 full days on it.

      .
      .
  4   | bp_vuln
      +================ (printf)
  4   | vuln+X (call)
      +---------------- <-- sp_vuln    ($0, content not leakable as "$0" is not valid)
      | fmt ptr
 0x18 |----------------                 $1
      |     ...                         ..
      +---------------- <-- bp_vuln     $6
  4   | bp_main
      +================ (vuln)          $7
  4   | main+X (call)
      +---------------- <-- sp_main     $8 (content leakable!)
      | fmt ptr         o------------------.
 0x10 |----------------                    |
      |     ...                            |
      +----------------                    |
  ?   | align & ~0xf                       |
      +---------------- <-- bp_main        |
  4   | bp_start                           |
      +================ (main)             |
  4   | start+X (call)                     |
      +----------------                    |
  ?   |     ...                            |
      +---------------- <------------------' (misalign possible)
  ?   | "<fmt> ... '\0'
      +----------------
  ?   |     ...
      `---------------- 0xbfffffff (stack)


A few things that made this so hard for me:
- The userinput is through program arguments, which means every different
  length will cause different stack addresses and alignments
- Figuring out the printf arg index of argv[1] required a minimum of 2 pointers
  leaks
- The index may not lend in the exact aligned position of argv[1]

Did I miss something?


format2
-------

Much simpler (a few minutes).

      .
      .
      +---------------- <-- sp_vuln ("$0")
  4   | buf ptr         o--.
      |----------------    |
  4   | size (512)         |
      |----------------    |
  4   | stream (stdin)     |
      |----------------    |
  4   |     ...            |
      +---------------- <--'
0x208 | buf
      +---------------- <-- bp_vuln
  ?   |     ...
      `---------------- 0xbfffffff (stack)


format3
-------

Tricky writing procedure, cute.

      .
      .
      +================ (printf)
      | printfbuffer+X
      +---------------- <-- sp_printbuffer     ($0)
      | buf ptr         o-------------------.
 0x18 |----------------                     |   $1
      |     ...                             |   ..
      +---------------- <-- bp_printbuffer  |   $6
  4   | bp_vuln                             |
      +================ (printbuffer)       |   $7
  4   | vuln+X                              |
      +---------------- <-- sp_vuln         |   $8
  4   | buf ptr         o--.                |
      |----------------    |                |   $9
  4   | size (512)         |                |
      |----------------    |                |  $10
  4   | stream (stdin)     |                |
      |----------------    |                |  $11
  4   |     ...            |                |
      +---------------- <--'----------------'  $12
0x208 | buf
      +---------------- <-- bp_vuln
      | bp_main
      +================ (vuln)
  ?   |     ...
      `---------------- 0xbfffffff (stack)


format4
-------

Actually trivial if relying on pwntools for the payload.

      .
      .
      +================ (printf)
  4   | vuln+X
      +---------------- <-- sp_vuln   $0
      | buf ptr         o--.
      |----------------    |          $1
      | size (512)         |
      |----------------    |          $2
0x218 | stream (stdin)     |
      |----------------    |          $3
      |     ...            |
      |---------------- <--'          $4
      | buf
      +---------------- <-- bp_vuln
  ?   |     ...
      `---------------- 0xbfffffff (stack)


Exploits: heap
==============

In gdb:
- bp before mallocs
- info proc mapping

malloc(64)
    0x804a000  0x806b000    0x21000          0           [heap]

-> user ptr: 0x804a008 (0x804a000+0x08)
-> 8B prefix
-> dump binary memory /tmp/dump.bin 0x804a000 0x806b000
-> hexdump -C /tmp/dump.bin

                                            .-- malloc(64)
                                           v
        00000000  00 00 00 00 49 00 00 00  00 00 00 00 00 00 00 00  |....I...........|
        00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
        *
        00000040  00 00 00 00 00 00 00 00  00 00 00 00 b9 0f 02 00  |................|
                                           ^           ^^^^^^^^^^^
                                           |
                                            `-- end of malloc(64)


        00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
        *
        00021000

malloc(4)
    0x804a000  0x806b000    0x21000          0           [heap]

-> user ptr: 0x804a050 (0x804a000+0x50)
-> unchanged
-> dump binary memory /tmp/dump.bin 0x804a000 0x806b000
-> hexdump -C /tmp/dump.bin

                                            .-- malloc(64)
                                           v
        00000000  00 00 00 00 49 00 00 00  00 00 00 00 00 00 00 00  |....I...........|
        00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
        *
        00000040  00 00 00 00 00 00 00 00  00 00 00 00 11 00 00 00  |................|
                                           ^           ^^^^^^^^^^^
                                           |
                                            `-- end of malloc(64)

                   .-- malloc(4)
                  v
        00000050  00 00 00 00 00 00 00 00  00 00 00 00 a9 0f 02 00  |................|
                  =========== ^                        ^^^^^^^^^^^
                              |
                               `-- end of malloc(4)

        00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
        *
        00021000


Pretty destructive approach in the exploit but can't be helped due to not being
able to insert zeroes (strcat).

I could get away without looking at the malloc implementation this time. Not
sure if it's going to last.
